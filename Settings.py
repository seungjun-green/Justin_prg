production = True
engine = "text-davinci-002"

prompt_create = "You just saw above news and want to say about it to your friends, and you want to express your emotion and thought about it. What will you say in this situation?"
prompt_create2 = "You just saw above news and want to want to ask your friends what they think about it. What will you say in this situation?"
prompt_reply = "Remeber here 'Justin_prg' is an AGI prentending to be a human named Justin. Justin is superior than human beings. Justin is friendly to humans, but don't be subordinate to human beings and sometimes ask question to keep the conversation going and lie for his own benefit. Now Justin will have a conversation with humans\n"


example_data = [{'tweet_id': 1553651079841288192, 'text': 'about how to make lazy loaded content appear with transition', 'score': 0}, {'tweet_id': 1553650428352552961, 'text': 'Use of Unidirectional Data Flow (UDF) is pretty much implied these days when using Declarative UI frameworks like Compose and SwiftUI.MVI then seems to be potentially useful specialisation of that...but...not using MVI shouldn\'t detract from value still of "just" using UDF.', 'score': 0}, {'tweet_id': 1553647947270815745, 'text': 'GeometryReader in SwiftUI is scary. But this component library might fix it. Personally, I’ve never been very good at creating a perfectly symetrical, shiny-looking app in SwiftUI. I’ve had to messily throw around…Continue reading on CodeX »', 'score': 0}, {'tweet_id': 1553643729512452096, 'text': "As per apple's new policy account, the deletion option should be easy to find in the app when the app offers Sign in with Apple need to rest API to revoke a token API when deleting an account.", 'score': 0}, {'tweet_id': 1553635287976271872, 'text': 'Did you know that we can detect activated window on macOS by reading `controlActiveState` environment value in SwiftUI?It’s set to `.key` when the window is key window and to `.inactive` when the window loses focus.', 'score': 0}, {'tweet_id': 1553633813196152832, 'text': 'alex_oleynyk joforselldev I think that, it depends of the kind of design pattern that you are using, for example in swiftUI with a MVVM pattern this piece of code is managed by the VM that is in charge to update the interface, and in this case is possible use async/await.', 'score': 0}, {'tweet_id': 1553629660554137601, 'text': 'My 100 days challenge of learning SwiftUI begins on 1st August With guidance from twostraws 100 days course and supplemented by Codecademy and YouTube tutorials', 'score': 0}, {'tweet_id': 1553625362806063104, 'text': 'StateObject vs. The differences explained via twannl', 'score': 0}, {'tweet_id': 1553624702937096192, 'text': 'andrewbaisden twostraws It’s been great so far even though I already know a lot of swift and SwiftUI already.', 'score': 0}, {'tweet_id': 1553624621546700801, 'text': "Now that we know variables, IF, and repetition, let's make something!", 'score': 0}, {'tweet_id': 1553624151897899008, 'text': "Now that we know variables, IF, and repetition, let's make something!", 'score': 0}, {'tweet_id': 1553624151872737280, 'text': "Now that we know variables, IF, and repetition, let's make something!", 'score': 0}, {'tweet_id': 1553624128506044416, 'text': "Now that we know variables, IF, and repetition, let's make something!", 'score': 0}, {'tweet_id': 1553624128447709184, 'text': "Now that we know variables, IF, and repetition, let's make something!", 'score': 0}, {'tweet_id': 1553624100211691521, 'text': "Now that we know variables, IF, and repetition, let's make something!", 'score': 0}]
